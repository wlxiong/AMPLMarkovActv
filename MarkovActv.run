# Define the feasible states for each time slice

let isFeasibleState[1,H,HOME] := 1;		# initialize the terminal state for individual 1
let isFeasibleState[2,H,HOME] := 1;		# initialize the terminal state for individual 2

for {n in PERS, t in H-1..0 by -1, j in ACTV, k in ACTV union WORK[n]} {
	if t < opening[j]/T or t > closing[j]/T then
		continue;
	if j == k then {
		for {h in TIME} {
			if t + 1 >= opening[k]/T and
			   t + h <= closing[k]/T and
			   t + h <= H and
			   isFeasibleState[n,t+h,k] > 0 then {
					let isFeasibleState[n,t,j] := 1;
					let isFeasibleChoice[n,t,j,k,h] := 1;
			};
		}
	} else {
		if t + travelTime[t,j,k] <= H and
		   isFeasibleState[n,t+travelTime[t,j,k],k] > 0 then {
				let isFeasibleState[n,t,j] := 1;
				let isFeasibleChoice[n,t,j,k,travelTime[t,j,k]] := 1;
		};
	};
}

# Write isFeasibleState to DATA/ISFS.sol
for {n in PERS} {
	printf "individual %d:\n", n > DATA/ISFS.sol;
	for {t in 0..H} {
		for {j in ACTV}
			printf "%d\t", isFeasibleState[n,t,j] > DATA/ISFS.sol;
		printf "\n" > DATA/ISFS.sol;
	}
	printf "\n" > DATA/ISFS.sol;
}

# Write number of decisions for each state to DATA/ISFD.sol
for {n in PERS} {
	printf "individual %d:\n", n > DATA/ISFD.sol;
	for {t in 0..H} {
		for {j in ACTV} {
			if (t,j) in X[n] then { 
				printf "%d\t", card(DACTV[n,t,j]) > DATA/ISFD.sol;
			};
		}
		printf "\n" > DATA/ISFD.sol;
	}
	printf "\n" > DATA/ISFD.sol;
}