# Define the feasible states for each time slice
let isFeasible[H,HOME] := 1;	# initialize the terminal state
for {t in H-1..0 by -1} {
	for {j in ACTV} {
		for {k in ACTV} {
			if t+travelTime[j,k]+1 <= H and isFeasible[t+travelTime[j,k]+1, k] > 0 then
				let isFeasible[t,j] := 1;
		}
	}
}

# Write isFeasible to BIN.sol
for {t in 0..H} {
	for {j in ACTV} {
			printf "%d\t", isFeasible[t,j] > DATA/ISF.sol;
	}
	printf "\n" > DATA/ISF.sol;
}
