# Call solver and give it options

# Load model and data
model "MarkovActv.mod"
data "MarkovActv.dat"

# include the simulated states and choices
data "DATA/MC.dat"

# read the estimates
data "DATA/MLE.dat"

# Define the problem
problem MarkovActvMDP:

# Choose the objective function
likelihood0,

# List the variables
EV, actvUtil, choiceUtil, choiceProb, valueOfTime, theta, Um, b, c,

# List the constraints
Bellman_Eqn,
EVBound;

# Set at a trivial inistial value
let {(t,j) in X} EV[t,j] := initEV;

# Set at true values
let theta := trueTheta;
fix theta;

# Set at the estimated values
let valueOfTime := valueOfTime_;
let {j in ACTV} Um[j]:= Um_[j];
let {j in ACTV}  b[j]:= b_[j];
let {j in ACTV}  c[j]:= c_[j];

# Fix the structural parameters at the estimated values
fix valueOfTime;
fix Um;
fix b;
fix c;

# Specify KNITRO solver options:
option solver knitroampl;
option knitro_options "alg=1 hessopt=1 outlev=0 maxit=100 xtol=0.0000000001 wantsol=1";

# Output commands
option display_round 6, display_width 120;
# option log_file "DATA/LL.log";

# first, try all the possible values of b[1]
param lf_b1 {TIME};
for {s in TIME} {
	# set b
	let b[1] := s*T;
	fix b;
	# solve the problem
	solve MarkovActvMDP;
	display _solve_time;
	# calculate likelihood
	let lf_b1[s] := 
		sum {i in PERS, t in TIME} 
			if xt[i,t] <> -1 and dt[i,t] <> -1 then 
				log( choiceProb[ t, xt[i,t], dt[i,t] ] ) 
			else
				1.0;
	display s, lf_b1[s];
}

# then, try all the possible combinations of b[1] and b[2]
set TT := (0..(H-1) by 5) union {H-1};
param lf_b12 {TT cross TT};
for {s in TT} {
	for {r in TT} {
		# set b
		let b[1] := s*T;
		let b[2] := r*T;
		fix b;
		# solve the problem
		solve MarkovActvMDP;
		display _solve_time;
		# calculate likelihood
		let lf_b12[s,r] := 
			sum {i in PERS, t in TIME} 
				if xt[i,t] <> -1 and dt[i,t] <> -1 then 
					log( choiceProb[ t, xt[i,t], dt[i,t] ] ) 
				else
					1.0;
		display s, r, lf_b12[s,r];
	}
}

# print likelihood values
printf "t = [\n" > DATA/LL.m;
for {t in TIME} {
	printf "%f\n", t*T> DATA/LL.m;
}
printf "];\n" > DATA/LL.m;

printf "lf_b1 = [\n" > DATA/LL.m;
for {t in TIME} {
	printf "%f\n", lf_b1[t] > DATA/LL.m;
}
printf "];\n" > DATA/LL.m;

printf "tt = [\n" > DATA/LL.m;
for {t in TT} {
	printf "%f\n", t*T> DATA/LL.m;
}
printf "];\n" > DATA/LL.m;

printf "lf_b12 = [\n" > DATA/LL.m;
for {s in TT} {
	for {t in TT} {
		printf "%f\t", lf_b12[s,t] > DATA/LL.m;
	}
	printf "\n" > DATA/LL.m;
}
printf "];\n" > DATA/LL.m;
