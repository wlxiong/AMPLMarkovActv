# Call solver and give it options

# Load model and data
model "MarkovActv.mod";
data "MarkovActv.dat"

# include the simulated states and choices
data 'DATA/MC.dat'

# Define the problem
problem MarkovActvMDP:

# Choose the objective function
likelihood0,

# List the variables
EV, actvUtil, choiceUtil, choiceProb, valueOfTime, theta, Um, b, c,

# List the constraints
Bellman_Eqn,
EVBound;

# Set at a trivial inistial value
let {(t,j) in X} EV[t,j] := initEV;

# Set at true values
let valueOfTime := trueValueOfTime;
let theta := trueTheta;

let {j in ACTV} Um[j]:= trueUm[j];
let {j in ACTV}  b[j]:= trueB[j];
let {j in ACTV}  c[j]:= trueC[j];

# Fix the structural parameters at the true values
fix valueOfTime;
fix theta;

fix Um;
fix b;
fix c;

# Specify KNITRO solver options:
option solver knitroampl;
option knitro_options "alg=1 hessopt=1 outlev=0 maxit=100 xtol=0.0000000001 wantsol=1";

# Output commands
option display_round 6, display_width 120;

# first, try the true value
solve MarkovActvLF;
display _solve_time;
param ml;
let ml := 
	sum {i in PERS, t in TIME} 
		if xt[i,t] <> -1 and dt[i,t] <> -1 then 
			log( choiceProb[ t, xt[i,t], dt[i,t] ] ) 
		else
			1.0;
display trueB[2], ml;

# second, try all the possible values of b[2]
param lf_b2 {TIME};
for {s in TIME} {
	# set b
	let b[2] := s*T;
	fix b;
	# solve the problem
	solve MarkovActvLF;
	display _solve_time;
	# calculate likelihood
	let lf_b2[s] := 
		sum {i in PERS, t in TIME} 
			if xt[i,t] <> -1 and dt[i,t] <> -1 then 
				log( choiceProb[ t, xt[i,t], dt[i,t] ] ) 
			else
				1.0;
	display s, lf_b2[s];
};

# finally, try all the possible combinations of b[2] and b[3]
param lf_b23 {TIME cross TIME};
for {s in TIME} {
	for {r in TIME}
		# set b
		let b[2] := s*T;
		let b[3] := r*T;
		fix b;
		# solve the problem
		solve MarkovActvMDP;
		display _solve_time;
		# calculate likelihood
		let lf_b23[s,r] := 
			sum {i in PERS, t in TIME} 
				if xt[i,t] <> -1 and dt[i,t] <> -1 then 
					log( choiceProb[ t, xt[i,t], dt[i,t] ] ) 
				else
					1.0;
		display s, r, lf_b23[s,r];
	};
};

# print likelihood values
printf "b2 = %f;\n", trueB[2] > DATA/LL.m;
printf "b3 = %f;\n", trueB[3] > DATA/LL.m;
printf "ml = %f;\n", ml > DATA/LL.m;

printf "tt = [\n" > DATA/LL.m;
for {t in TIME} {
	printf "%f\n", t*T> DATA/LL.m;
};
printf "];\n" > DATA/LL.m;

printf "lf_b2 = [\n" > DATA/LL.m;
for {t in TIME} {
	printf "%f\n", t*T, lf_b2[t] > DATA/LL.m;
};
printf "];\n" > DATA/LL.m;

for {s in TIME} {
	printf "lf_b23 = [\n" > DATA/LL.m;
	for {t in TIME} {
		printf "%f\t", lf_b23[s,t] > DATA/LL.m;
	};
	printf "\n" > DATA/LL.m;
}
printf "];\n" > DATA/LL.m;
