# Define the feasible composite states
for {t in TIME} {
	for {j1 in AUW[1], j2 in AUW[2]} {
		for {a1 in AUW[1], a2 in AUW[2], h in 1..DH} {
			if (t,j1) in X[1] and (a1,h) in D[1,t,j1] and
			   (t,j2) in X[2] and (a2,h) in D[2,t,j2] then {
				let isFeasibleCoState[t,j1,j2] := 1;
				break;
			}
		}
	}
}

# Write isFeasibleState to DATA/jointISFS.sol
for {t in TIME} {
	for {j1 in AUW[1], j2 in AUW[2]} {
		if (t,j1,j2) in XX then
			printf "(%3d,%d,%d):%3d\t", t, j1, j2, card(DD[t,j1,j2]) > DATA/jointISFS.sol;
	}
	printf "\n" > DATA/jointISFS.sol;
}
