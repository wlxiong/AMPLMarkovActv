# Call solver and give it options

# Load model and data
model "MarkovActv.mod"
data "MarkovActv.dat"

# include the simulated states and choices
data "DATA/MC.dat"

# Define the MLE problem
problem MarkovActvMLE:

# Choose the objective function
likelihood,

# List the variables
EV, actvUtil, choiceUtil, choiceProb, VoT, theta, Um, b, c,
# EV, actvUtil, choiceUtil, choiceProb, VoT, theta, Uw, xi, gamma,

# List the constraints
Bellman_Eqn,
Bellman_EqnH,
EVBound;

# include the code that define the state and choice set
include MarkovActv.run

# Set at a trivial initial value
let {t in 0..H, j in ACTV} EV[t,j] := initEV;

# Initial guesses set at trivial values; probably not good initial guesses
fix VoT := trueVoT;

let {j in ACTV} Um[j]:= initUm[j];
let {j in ACTV}  b[j]:= initB[j];
let {j in ACTV}  c[j]:= initC[j];

# let {j in ACTV} Uw[j] := initUw[j];
# let {j in ACTV} xi[j] := initXi[j];
# let {j in ACTV} gamma[j] := initGamma[j];
# fix {j in ACTV} lambda[j] := trueLambda[j];

# Fix theta at the true value
fix theta := trueTheta;

# Specify KNITRO solver options:
option solver "C:\Ziena\Knitro800\knitroampl\knitroampl.exe";
option knitro_options "alg=2 hessopt=2 outlev=3 maxit=500 xtol=0.0000000001 wantsol=1";

# Solve command
solve MarkovActvMLE;
display _solve_time;

# Output commands
option display_round 6, display_width 120;

# display estimates of structural parameters
display beta, theta, VoT;
display Um, b, c;
# display Uw, xi, gamma, lambda;

# write the estimates
printf "param VoT_ := %f\n; ", VoT > DATA/MLE.dat;
printf "param Um_ := \n" > DATA/MLE.dat;
for {j in ACTV} {
	printf "%d\t%f\n", j, Um[j] > DATA/MLE.dat;
}
printf ";\n" > DATA/MLE.dat;
printf "param  b_ := \n" > DATA/MLE.dat;
for {j in ACTV} {
	printf "%d\t%f\n", j, b[j] > DATA/MLE.dat;
}
printf ";\n" > DATA/MLE.dat;
printf "param  c_ := \n" > DATA/MLE.dat;
for {j in ACTV} {
	printf "%d\t%f\n", j, c[j] > DATA/MLE.dat;
}
printf ";\n" > DATA/MLE.dat;

# export to MATLAB
printf "b1_ = %f;\n", b[1] > DATA/MLE.m;
printf "b2_ = %f;\n", b[2] > DATA/MLE.m;
printf "ml = %f;\n", likelihood > DATA/MLE.m;

# display Uw, xi, gamma, lambda > DATA/MLE.sol;

# display the value function
# display EV;