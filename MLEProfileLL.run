# Call solver and give it options

# Load model and data
model "MarkovActv.mod";
data "MarkovActv.dat";

# include the simulated states and choices
data "DATA/MC.dat";

# read the estimates
data "DATA/MLE.dat";

# Define the problem
problem MarkovActvMDP:

# Choose the objective function
likelihood0,

# List the variables
EV, actvUtil, choiceUtil, choiceProb, VoT, theta, Um, b, c,

# List the constraints
Bellman_Eqn,
Bellman_EqnH;

# include the code that define the state and choice set
include MarkovActv.run

# Set at a trivial initial value
let {t in 0..H, j in ACTV} EV[t,j] := initEV;

# Fix at the estimated values
fix VoT := VoT_;
fix {j in ACTV} Um[j]:= Um_[j];
fix {j in ACTV}  b[j]:= b_[j];
fix {j in ACTV}  c[j]:= c_[j];

# Fix at true values
fix theta := trueTheta;

# Specify KNITRO solver options:
option solver "C:\Ziena\Knitro811\knitro-8.1.1-z-WinMSVC10\knitroampl\knitroampl";
option knitro_options "alg=2 hessopt=2 outlev=0 maxit=100 xtol=0.0000000001 wantsol=1";

# Output commands
option display_round 6, display_width 120;
option solver_msg 0;
option show_stats 0; 
# option log_file "DATA/LL.log";

# first, try all the possible values of b[2]
set TT := (0..(H-1) by 8) union {H-1};
param lf_b2 {TT};
for {s in TT} {
	# set b
	let b[2] := s*T;
	fix b;
	# solve the problem
	solve MarkovActvMDP > DATA/LL.log;
	# display _solve_time;
	# calculate likelihood
	let lf_b2[s] := 
		sum {i in PERS, t in TIME} 
			if (t, xt[i,t]) in X and dt[i,t] in D[t, xt[i,t]] then
				log( choiceProb[ t, xt[i,t], dt[i,t] ] )
			else
				1.0;
	display s, lf_b2[s];
}

# then, try all the possible combinations of b[2] and b[3]
param lf_b23 {TT cross TT};
for {s in TT} {
	for {r in TT} {
		# set b
		let b[2] := s*T;
		let b[3] := r*T;
		fix b;
		# solve the problem
		solve MarkovActvMDP > DATA/LL.log;
		# display _solve_time;
		# calculate likelihood
		let lf_b23[s,r] := 
			sum {i in PERS, t in TIME} 
				if (t, xt[i,t]) in X and dt[i,t] in D[t, xt[i,t]] then
					log( choiceProb[ t, xt[i,t], dt[i,t] ] )
				else
					1.0;
		display s, r, lf_b23[s,r];
	}
}

# print likelihood values

printf "tt = [\n" > DATA/LL.m;
for {t in TT} {
	printf "%f\n", t*T> DATA/LL.m;
}
printf "];\n" > DATA/LL.m;

printf "lf_b2 = [\n" > DATA/LL.m;
for {t in TT} {
	printf "%f\n", lf_b2[t] > DATA/LL.m;
}
printf "];\n" > DATA/LL.m;

printf "lf_b23 = [\n" > DATA/LL.m;
for {s in TT} {
	for {t in TT} {
		printf "%f\t", lf_b23[s,t] > DATA/LL.m;
	}
	printf "\n" > DATA/LL.m;
}
printf "];\n" > DATA/LL.m;
